package cn.com.enersun.oa.oba.biz;import cn.com.enersun.cloud.admin.dto.user.UserInfo;import cn.com.enersun.cloud.framework.biz.BaseBiz;import cn.com.enersun.cloud.framework.search.Searchable;import cn.com.enersun.exception.DataException;import cn.com.enersun.oa.commons.enumeration.BpmTypeEnum;import cn.com.enersun.oa.commons.feign.OrgFeignService;import cn.com.enersun.oa.commons.feign.UserFeignService;import cn.com.enersun.oa.commons.feign.WorkflowFeignService;import cn.com.enersun.oa.oba.assembler.ObaEditRecordAssembler;import cn.com.enersun.oa.oba.assembler.ObaRemindAssembler;import cn.com.enersun.oa.oba.dao.ObaAttendMemberDao;import cn.com.enersun.oa.oba.dao.ObaPlanDao;import cn.com.enersun.oa.oba.dao.ObaRemindDao;import cn.com.enersun.oa.oba.model.ObaActInfo;import cn.com.enersun.oa.oba.model.ObaAttendMember;import cn.com.enersun.oa.oba.model.ObaRemind;import cn.com.enersun.oa.oba.model.enumeration.ObaLeaderAudtEnum;import cn.com.enersun.oa.oba.model.enumeration.ObaRemindEnum;import cn.com.enersun.oa.oba.properties.ObaRoleCodes;import cn.com.enersun.oa.oba.util.ExcelFileGenerator;import cn.com.enersun.oa.oba.util.OrgUtil;import cn.com.enersun.oa.oba.util.RoleUtil;import cn.com.enersun.oba.dto.ObaEditRecordDTO;import cn.com.enersun.oba.dto.ObaRemindDTO;import cn.com.enersun.oba.dto.PersonDto;import cn.com.enersun.sdk.common.BaseContextHandler;import cn.com.enersun.sdk.response.InvokeResult;import cn.com.enersun.workflow.dto.BpmWorkFlowDTO;import cn.com.enersun.workflow.dto.YWDJVO;import com.alibaba.fastjson.JSONObject;import io.swagger.models.auth.In;import lombok.extern.slf4j.Slf4j;import org.apache.commons.lang3.StringUtils;import org.apache.poi.hssf.usermodel.HSSFWorkbook;import org.beetl.sql.core.engine.PageQuery;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import javax.servlet.http.HttpServletResponse;import java.net.URLEncoder;import java.time.LocalDate;import java.time.LocalDateTime;import java.time.format.DateTimeFormatter;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;/** *  1 可以重复审批，重复提交<br> * @author: xukl * @date: 2019-01-25 */@Service@Transactional(rollbackFor = Exception.class)@Slf4jpublic class ObaRemindBiz extends BaseBiz<ObaRemindDao,ObaRemind> {    @Autowired    private ObaPlanDao planDao;    @Autowired    private ObaRemindAssembler assembler;    @Autowired    private RoleUtil roleUtil;    @Autowired    private ObaRemindDao  remindDao;    @Autowired    private WorkflowFeignService workflowFeignService;    @Autowired    private OrgUtil orgUtil;    @Autowired    private OrgFeignService orgFeignService;    @Autowired    private  ObaActInfoBiz  infoBiz;    @Autowired    private ObaEditRecordBiz obaEditRecordBiz;    @Autowired    private ObaEditRecordAssembler editRecordAssembler;    @Autowired    private ObaAttendMemberDao memberDao;    @Autowired    private UserFeignService userFeignService;    @Autowired    private ObaRoleCodes obaRoleCodes;    /**     * 备忘录分页<br>     * @param searchable     * @return     */    public PageQuery dtoList(Searchable searchable){        PageQuery pageQuery = searchable.getPage();        Map<String, Object> paras = searchable.paras(true, true);        paras.put("userAccount",BaseContextHandler.getUserAccount());        pageQuery.setParas(paras);        pageQuery.setOrderBy(" approval_time desc ");        PageQuery<ObaActInfo> result = planDao.remindList(pageQuery);        List<ObaActInfo> list = result.getList();        List<ObaActInfo>  hintList= new ArrayList<>();        LocalDate now = LocalDate.now();        String split=" ";        for (ObaActInfo  info:list) {            if(info.getActInfoId()==null|| ObaRemindEnum.Wirting.equals(info.getStatus())){                LocalDate endDate = LocalDate.parse(info.getUnEndAssured().split(split)[0]);                LocalDate deptDate = endDate.plusDays(5);                if(deptDate.compareTo(now)<0){                    info.setHint(1);                }                LocalDate officeDate = endDate.plusDays(11);                if(officeDate.compareTo(now)<0){                    hintList.add(info);                }            }        }        if(hintList.size()>=3){        }        return result;    }    /**     * @return     */    private boolean privilege(){        return !(roleUtil.isObaManager()||roleUtil.isOfficeManager()||roleUtil.isSecretary()||roleUtil.isDeptManager()||roleUtil.isOffficeAdminManager());    }    public  ObaRemind  addRemind(ObaRemindDTO dto,boolean updateFlag){        ObaRemind remind = assembler.toEntity(dto);        ObaActInfo single = infoBiz.single(dto.getActInfoId());        if(dto.getRemindId()==null){            if(StringUtils.isEmpty(dto.getNextUsers())){                remind.setNextUsers(BaseContextHandler.getUserAccount());            }            remind.setStatu(ObaRemindEnum.Wirting);            remind.setFlowHistory("");            this.insert(remind,true);            single.setStatusId(11L);            infoBiz.updateById(single);        }else{            if(updateFlag){                //先把修改前的数据查出来然后跟修改后的数据做比较                Long id = dto.getRemindId();                ObaRemind beforeObaRemind = this.single(id);                this.updateById(remind);                ObaRemindDTO afterDto = dto;                ObaEditRecordDTO editRecordDto = null;                try {                    UserInfo userInfo = userFeignService.getUserInfo(BaseContextHandler.getUserAccount(), BaseContextHandler.getToken());                    editRecordDto = obaEditRecordBiz.getChangeData(afterDto,assembler.toDTO(beforeObaRemind),userInfo);                } catch (IllegalAccessException e) {                    log.error("修改记录出的问题",e);                    throw new RuntimeException();                }                if(editRecordDto!=null){                    editRecordDto.setModelName("备忘录");                    obaEditRecordBiz.insert(editRecordAssembler.toEntity(editRecordDto),true);                }            }        }        return remind;    }    /**     * 审批     * @param dto     */    public ObaRemindDTO approval(ObaRemindDTO dto){        ObaRemind remind = single(dto.getRemindId());        ObaActInfo single = infoBiz.single(dto.getActInfoId());        //判断稿件是否存在,如果没有存在，则新增，发起流程        if (remind == null || StringUtils.isEmpty(remind.getProcInstId())) {            //新增并发起流程            remind = addRemind(dto,false);            BpmWorkFlowDTO bpmWorkFlowDTO = getBpmWorkFlowDTO(dto,remind);            InvokeResult<BpmWorkFlowDTO> startBpmResult = workflowFeignService.startFlowBpm(bpmWorkFlowDTO);            remind.setTemplateId(getTemplate());            getProcData(remind,startBpmResult);            remind.setProcStartor(BaseContextHandler.getUserAccount());            remind.setProcStartTime(System.currentTimeMillis());            remind.setApprovalTime(LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")));            remind.setStatu(ObaRemindEnum.Audit);            if("N6".equals(dto.getNodeId())){                single.setStatusId(13L);            }else{                single.setStatusId(12L);            }        } else {            String nextUserStr = remind.getNextUsers();            remind.setApprovalTime(LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")));            String userAccount = BaseContextHandler.getUserAccount();            boolean  leaderFlag=false;            boolean secretaryFlag=false;            if(roleUtil.isLeader()){                leaderFlag=true;                if(BpmTypeEnum.H_REFUSE.getValue().equals(dto.getBpmType())){                    InvokeResult invokeResult = refuseNode(dto, remind, single);                    if(!invokeResult.isSuccess()){                        throw new DataException("流程退回失败");                    }else{                        return assembler.toDTO(remind);                    }                }                String[] nextUsers = nextUserStr.split(",");                List<String> newNextUser = new ArrayList<>();                for (String nextUser: nextUsers) {                    if(StringUtils.isNotEmpty(nextUser)&&!nextUser.equals(" ")&&!nextUser.equals(userAccount)){                        newNextUser.add(nextUser);                    }                }                String join = StringUtils.join(newNextUser, ",");                remind.setNextUsers(join);                if(newNextUser.size()==0){                    remind.setApprovalStatu(ObaLeaderAudtEnum.Close);                    remind.setNextUsers(remind.getObaManager());                    single.setStatusId(17L);                }                if(newNextUser.size()>0&&StringUtils.isEmpty(remind.getSecretarys())){                    single.setStatusId(16L);                }                recordFlowHistory(remind);                this.updateById(remind);                infoBiz.updateById(single);                return assembler.toDTO(remind);            }            if(!leaderFlag&&roleUtil.isSecretary()){                secretaryFlag=true;                if(BpmTypeEnum.H_REFUSE.getValue().equals(dto.getBpmType())){                    InvokeResult invokeResult = refuseNode(dto, remind, single);                    if(!invokeResult.isSuccess()){                        throw new DataException("流程退回失败");                    }else{                        return assembler.toDTO(remind);                    }                }                String leader = roleUtil.leader();                String[] split = remind.getSecretarys().split(",");                List<String> newSecretary = new ArrayList<>();                for(String str:split){                    if(!str.equals(userAccount)){                        newSecretary.add(str);                    }                }                String newNextUsers = nextUserStr.replace(userAccount,leader);                remind.setNextUsers(newNextUsers);                remind.setSecretarys(StringUtils.join(newSecretary,","));                if(newSecretary.size()==0){                    remind.setSecretarys("");                }                single.setStatusId(15L);                recordFlowHistory(remind);                this.updateById(remind);                infoBiz.updateById(single);                return  assembler.toDTO(remind);            }            if(remind.getIsRefuse()==1&&roleUtil.isObaManager()){                remind.setSecretarys(dto.getNextUsers());                remind.setNextUsers(dto.getNextUsers());                remind.setObaManager(userAccount);                remind.setIsRefuse(0);                single.setStatusId(15L);                infoBiz.updateById(single);                this.updateById(remind);                return   assembler.toDTO(remind);            }            BpmWorkFlowDTO bpmWorkFlowDTO = getBpmWorkFlowDTO(dto,remind);            if("N47".equals(dto.getNodeId())&&!leaderFlag&&!secretaryFlag){                if(roleUtil.isObaManager()&&remind.getApprovalStatu().equals(ObaLeaderAudtEnum.Auditing)){                    bpmWorkFlowDTO.setNextUser(userAccount);                }            }            InvokeResult<BpmWorkFlowDTO> bpmWorkFlowDTOInvokeResult = workflowFeignService.doNextByFlowInstIdBpm(bpmWorkFlowDTO, null);            if("N6".equals(dto.getNodeId())){                single.setStatusId(13L);            }            if("N7".equals(dto.getNodeId())){                single.setStatusId(14L);            }            getProcData(remind,bpmWorkFlowDTOInvokeResult);            remind.setStatu(ObaRemindEnum.Audit);            if (BpmTypeEnum.H_PASS.getValue().equals(dto.getBpmType())) {                if (remind.getProcEndTime() != null) {                    remind.setNextUsers("");                    remind.setStatu(ObaRemindEnum.Close);                    remind.setApprovalTime("");                    single.setStatusId(18L);                }            }            if(BpmTypeEnum.H_REFUSE.getValue().equals(dto.getBpmType())){                remind.setStatu(ObaRemindEnum.Wirting);                remind.setApprovalTime("");            }            if("N47".equals(dto.getNodeId())&&!leaderFlag&&!secretaryFlag){                if(roleUtil.isObaManager()&&remind.getApprovalStatu().equals(ObaLeaderAudtEnum.Auditing)){                    remind.setSecretarys(dto.getNextUsers());                    remind.setNextUsers(dto.getNextUsers());                    remind.setObaManager(userAccount);                }            }        }        infoBiz.updateById(single);        recordFlowHistory(remind);        this.updateById(remind);        return dto=assembler.toDTO(single(remind.getRemindId()));    }    /**     * 流转记录     */    public InvokeResult  flowHistory(Long id){        ObaRemind remind = single(id);        if(remind==null){            throw  new  DataException("该条信息数据库查询不到！");        }        YWDJVO ywdjvo = new YWDJVO();        String formId = remind.getTemplateId();        String procInstId = remind.getProcInstId();        if(StringUtils.isEmpty(procInstId)){            return InvokeResult.success(new ArrayList<>());        }        ywdjvo.setTemplateFormId(formId);        ywdjvo.setFormInstanceId(id.toString());        InvokeResult<List<Map<String, Object>>> historyOpinionByInstIdBpm = workflowFeignService.getHistoryOpinionByInstIdBpm(ywdjvo,procInstId , BaseContextHandler.getUserAccount());        if(historyOpinionByInstIdBpm.getErrorMessage()==null){            List<Map<String, Object>> list1 = changeHistoryOpinion(historyOpinionByInstIdBpm.getData());            return InvokeResult.success(list1);        }        return InvokeResult.success(historyOpinionByInstIdBpm);    }    /**     * 获取下一个节点信息     * @param id     * @return     */    public List<Map<String,Object>> getNextNodeInfo(Long id) {        if(id==null ){            return packageDefaultNextInfo();        }        ObaRemind remind = remindDao.qryRemind(id);        if(remind==null || StringUtils.isEmpty(remind.getProcInstId())){            return packageDefaultNextInfo();        }        BpmWorkFlowDTO bpmWorkFlowDTO = new BpmWorkFlowDTO();        List<Map<String,Object>> nextInfoList = null ;        String userAccount = BaseContextHandler.getUserAccount();        bpmWorkFlowDTO.getBpmDTO().setTemplateFormId(remind.getTemplateId());        bpmWorkFlowDTO.getBpmDTO().setFormInstanceId(id.toString());        bpmWorkFlowDTO.setProcessInstanceID(remind.getProcInstId());        bpmWorkFlowDTO.setCurrentUserName(userAccount);        InvokeResult<List<Map<String, Object>>> nextNodeInfo = workflowFeignService.getNextNodeInfo(bpmWorkFlowDTO);        if(nextNodeInfo==null || nextNodeInfo.getErrorMessage()!=null) {            throw new DataException(nextNodeInfo.getErrorMessage());        }        if(nextNodeInfo!=null && nextNodeInfo.getStatus()==200 && nextNodeInfo.getData()!=null&&nextNodeInfo.getData().size()>0){            nextInfoList = nextNodeInfo.getData();            boolean flag=false;            boolean isObaManager=false;            for (int i=0,len=nextInfoList.size();i<len;i++) {                Map<String,Object> map=nextInfoList.get(i);                map.put("operType",BpmTypeEnum.H_PASS.getValue());                String nodeId= map.get("id").toString();                if(i==0&&"N3".equals(nodeId)){                    if(roleUtil.isSecretary()){                        flag=true;                        map.put("name","送领导阅办");                    }                    if(!flag){                        if(roleUtil.isLeader()){                            flag=true;                            map.put("name","阅办");                        }                    }                    if(!flag){                        if(roleUtil.isObaManager()){                            flag=true;                            map.put("name","关闭活动");                        }                    }                }                if(i==0&&!flag&&"N47".equals(nodeId)&&roleUtil.isObaManager()){                    map.put("name","分送领导秘书");                }            }            if(remind.getIsRefuse()==1&&roleUtil.isObaManager()){                Map<String, Object> map2 = new HashMap<>();                map2.put("name","分送领导秘书");                map2.put("operType",BpmTypeEnum.H_PASS.getValue());                nextInfoList.add(map2);            }            Map<String, Object> map1 = new HashMap<>();            ObaActInfo single = infoBiz.single(id);            if(!single.getReportedUserAccount().equals(BaseContextHandler.getUserAccount())){                map1.put("name","退回");                map1.put("operType",BpmTypeEnum.H_REFUSE.getValue());                nextInfoList.add(map1);            }        }        return nextInfoList;    }    /**     * 首先开始时节点的名字     * @return     */    private List<Map<String, Object>> packageDefaultNextInfo(){        List<Map<String, Object>> list = new ArrayList<>();        Map<String, Object> map = new HashMap<>();        map.put("operType",BpmTypeEnum.H_PASS.getValue());        map.put("name","活动主办处室负责人");        Map<String, Object> map2 = new HashMap<>();        map2.put("id","N6");        map2.put("operType",BpmTypeEnum.H_PASS.getValue());        map2.put("name","活动主办主任负责人");        map2.put("manualNodeType","1");        list.add(map);        list.add(map2);        return list;    }    public ObaRemind  remindDetail(Long id){        if(id==null){            return null;        }        ObaRemind obaRemind = remindDao.qryRemind(id);        ObaActInfo single = infoBiz.single(id);        if(obaRemind==null){            obaRemind=assembler.ActInfoTORemind(single);            YWDJVO ywdjvo = new YWDJVO();            ywdjvo.setTemplateFormId(single.getTemplateId());            String userAccount = BaseContextHandler.getUserAccount();            ywdjvo.setFormInstanceId(id.toString());            InvokeResult<List<Map<String, Object>>> historyOpinion = workflowFeignService.getHistoryOpinionByInstIdBpm(ywdjvo,single.getProcInstId() ,userAccount);            if(historyOpinion.getErrorMessage()==null&&historyOpinion.getData()!=null&&historyOpinion.getData().size()>0){                List<String> majorOpion = new ArrayList<>();                List<String> officeOpion = new ArrayList<>();                String split=",";                for (Map<String, Object>  history:historyOpinion.getData()) {                    String taskName = history.get("taskName").toString();                    Object opinion = history.get("opinion");                    if("活动主办人".equals(taskName)){                        if(opinion!=null&&StringUtils.isNotEmpty(opinion.toString())){                            majorOpion.add("活动主办人："+opinion);                        }                    }                    if("活动主办处室负责人".equals(taskName)){                        if(opinion!=null&&StringUtils.isNotEmpty(opinion.toString())){                            majorOpion.add("处长："+opinion);                        }                    }                    if("活动主办主任负责人".equals(taskName)){                        if(opinion!=null&&StringUtils.isNotEmpty(opinion.toString())){                            majorOpion.add("主任："+opinion);                        }                    }                    if("活动管理员".equals(taskName)){                        if(opinion!=null&&StringUtils.isNotEmpty(opinion.toString())){                            officeOpion.add("管理员："+opinion);                        }                    }                    if("参与活动领导秘书".equals(taskName)){                        if(opinion!=null&&StringUtils.isNotEmpty(opinion.toString())){                            officeOpion.add("领导秘书："+opinion);                        }                    }                    if("参与活动领导".equals(taskName)){                        obaRemind.setLeaderOpinion(history.get("opinion").toString());                        if(opinion!=null&&StringUtils.isNotEmpty(opinion.toString())){                            obaRemind.setLeaderOpinion(opinion.toString());                        }                    }                }                obaRemind.setOfficeOpinion(StringUtils.join(officeOpion,split+"\r\n"));                obaRemind.setMajorDeptOpinion(StringUtils.join(majorOpion,split+"\r\n"));            }            Map<String,Object> params = new HashMap<>();            params.put("obaId",id);            List<ObaAttendMember>  userAccountList = memberDao.getByInfoId(params);            List<String> company = new ArrayList<>();            List<String>  outCompany = new ArrayList<>();            if(userAccountList!=null||userAccountList.size()>0){                for (ObaAttendMember member:userAccountList) {                    String user = member.getUserAccount();                    Map<String, Object> orgInfo = orgUtil.getOrgInfo(user);                    String corpId = orgInfo.get("corpId").toString();                    Map<String, Object> orgMap = orgUtil.getOrgInfo();                    String orgId = orgMap.get("id").toString();                    UserInfo userInfo = userFeignService.getUserInfo(user,BaseContextHandler.getToken());                    String userName = userInfo.getUserName();                    String orgName = orgMap.get("bizOrgName").toString();                    if(orgId.equals(corpId)){                        company.add(userName+"+"+orgName);                    }else{                        outCompany.add(userName+"+"+orgName);                    }                }            }            obaRemind.setCompany(StringUtils.join(company, ","));            obaRemind.setOutCompany(StringUtils.join(outCompany, ","));            obaRemind.setFormDoc(single.getFormDoc());            obaRemind.setActInfoId(id);            return  obaRemind;        }else{            obaRemind.setIsExits(1);        }        obaRemind.setFormDoc(single.getFormDoc());        return obaRemind;    }    /**     * 获取BpmWorkFlowDTO     * @param dto     * @return     */    public BpmWorkFlowDTO getBpmWorkFlowDTO(ObaRemindDTO dto,ObaRemind remind) {        String nextUser = dto.getNextUsers();        String templateFormId =getTemplate();        BpmWorkFlowDTO bpmWorkFlowDTO = new BpmWorkFlowDTO();        //创建调用工作流所需要的对象        YWDJVO ywdjvo = bpmWorkFlowDTO.getBpmDTO();        //从返回的对象里面获取主键id设置到ywdjvo的业务单据实例ID        ywdjvo.setFormInstanceId(remind.getRemindId().toString());        //信息整编人对应的流程模板id        ywdjvo.setTemplateFormId(templateFormId);        bpmWorkFlowDTO.setClassName(ObaRemind.class.getSimpleName());        //设置流程实例id        bpmWorkFlowDTO.setProcessInstanceID(remind.getProcInstId());        //设置业务单据        bpmWorkFlowDTO.setBpmDTO(ywdjvo);        //设置当前用户的名字        bpmWorkFlowDTO.setCurrentUserName(BaseContextHandler.getUserAccount());        //设置审批意见，参数由前端传过来，封装到SubmitComprehensiveDTO        bpmWorkFlowDTO.setOpinion(dto.getOpinion());        if(bpmWorkFlowDTO.getStatus()==null) {            bpmWorkFlowDTO.setStatus(new ArrayList<>());        }        bpmWorkFlowDTO.setBpmTypeStr(dto.getBpmType());        if("1".equals(dto.getIsManualNodeType())){            bpmWorkFlowDTO.setChooseNode(dto.getNodeId());        }        bpmWorkFlowDTO.setOpinion(dto.getOpinion());        //设置下一步人员，请procUtil这个的下一步人员给设置上值        if(StringUtils.isNotBlank(nextUser)){            bpmWorkFlowDTO.setNextUser(nextUser);        }        if("N125".equals(dto.getNodeId())){            bpmWorkFlowDTO.setMultiple(1);        }        return bpmWorkFlowDTO;    }    private String getTemplate() {        return "22";    }    private String  getUnitLevel(){        if(roleUtil.isHeadTenantId(BaseContextHandler.getTenantInfoId())){            return "1";        }else{            Map<String, Object> orgInfo = orgUtil.getOrgInfo();            return orgUtil.getUnitLevel((String) orgInfo.get("id"));        }    }    /**     * 执行工作流后，更新刊物数据     *     * @param bpmWorkFlowDTOInvokeResult     */    private void getProcData(ObaRemind remind, InvokeResult<BpmWorkFlowDTO> bpmWorkFlowDTOInvokeResult) {        BpmWorkFlowDTO bpmWorkFlowDTO = bpmWorkFlowDTOInvokeResult != null && bpmWorkFlowDTOInvokeResult.isSuccess() ? (BpmWorkFlowDTO) bpmWorkFlowDTOInvokeResult.getData() : null;        if (bpmWorkFlowDTO != null && org.apache.commons.lang3.StringUtils.isNotEmpty(bpmWorkFlowDTO.getProcessInstanceID())) {            //设置流程运行信息            remind.setProcInstId(bpmWorkFlowDTO.getProcessInstanceID());            remind.setProcEndTime(bpmWorkFlowDTO.getStopProcessDateTime() != null ? bpmWorkFlowDTO.getStopProcessDateTime().getTime() : null);            if(bpmWorkFlowDTO.getNextUserAccount()!=null && !bpmWorkFlowDTO.getNextUserAccount().isEmpty()){                remind.setNextUsers(StringUtils.join(bpmWorkFlowDTO.getNextUserAccount(),","));            }        }    }    /**     * 转换流转记录数据     *     * @return     */    public List<Map<String, Object>> changeHistoryOpinion(List<Map<String, Object>> history) {        if (history != null) {            Map<String, Object> map = history.get(history.size() - 1);            if (map.get("auditorName") != null && map.get("auditorName").toString().contains("$")) {                Map<String, Object> stringObjectMap = history.get(0);                String userName = stringObjectMap.get("auditorName").toString();                map.put("auditorName", userName);                history.remove(history.size() - 1);                history.add(map);            }        }        return history;    }    public ObaRemind qryRemind(Long id){        return   remindDao.qryRemind(id);    }    public void exportRemind(HttpServletResponse response, String id)throws Exception{        response.reset();        response.setContentType("application/x-download");        response.setCharacterEncoding("UTF-8");        response.setHeader("Content-Disposition", "attachment;filename="                + URLEncoder.encode("备忘录.xls", "UTF-8"));        ObaRemind remind = remindDetail(Long.parseLong(id));        ObaActInfo info = infoBiz.single(id);        String[][] tableData=exportData(remind,info);        HSSFWorkbook wb = ExcelFileGenerator.createRemindExcel(response.getOutputStream(),tableData);        wb.write(response.getOutputStream());    }    public String[][]  exportData(ObaRemind remind,ObaActInfo info){        String[][] tableData= new String[24][6];        tableData[0][0]="会议备忘录";        tableData[1][0]="会务活动名称";        tableData[1][1]=remind.getName();        tableData[2][0]="时间";        tableData[2][1]=remind.getUnStartAssured()+"~"+remind.getUnEndAssured();        tableData[2][2]="地点";        tableData[2][3]=StringUtils.isEmpty(remind.getAddress())?"":remind.getAddress();        tableData[2][4]="类别";        tableData[2][5]=StringUtils.isEmpty(remind.getObaType())?"":remind.getObaType();        tableData[3][0]="编制人";        tableData[3][1]=info.getReportedMember();        tableData[3][2]="编制时间";        tableData[3][3]=LocalDate.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));        tableData[3][4]="审批人";        tableData[3][5]=StringUtils.isEmpty(remind.getOfficeManager())?"":remind.getOfficeManager();        tableData[4][0]="参加人员(本单位)";        tableData[4][1]=StringUtils.isEmpty(remind.getCompany())?"":remind.getCompany();        tableData[5][0]="参加人员(外单位)";        tableData[5][1]=StringUtils.isEmpty(remind.getOutCompany())?"":remind.getOutCompany();        tableData[6][0]="议程";        tableData[6][1]=StringUtils.isEmpty(remind.getAgenda())?"":remind.getAgenda();        tableData[7][0]="内容";        tableData[7][1]=StringUtils.isEmpty(remind.getActContentAim())?"":remind.getActContentAim();        tableData[8][0]="牵头部门意见";        tableData[8][1]=StringUtils.isEmpty(remind.getMajorDeptOpinion())?"":remind.getMajorDeptOpinion();        tableData[9][0]="办公厅意见";        tableData[9][1]=StringUtils.isEmpty(remind.getOfficeOpinion())?"":remind.getOfficeOpinion();        tableData[10][0]="公司领导批示";        tableData[10][1]=StringUtils.isEmpty(remind.getLeaderOpinion())?"":remind.getLeaderOpinion();        tableData[11][0]="主送";        tableData[11][1]=StringUtils.isEmpty(remind.getSendDept())?"":remind.getSendDept();        return tableData;    }    private void recordFlowHistory(ObaRemind remind){        String userAccount = BaseContextHandler.getUserAccount();        UserInfo userInfo = userFeignService.getUserInfo(userAccount, BaseContextHandler.getToken());        String flowHistory = remind.getFlowHistory();        PersonDto person = new PersonDto();        person.setUserName(userInfo==null?"":userInfo.getUserName());        person.setUserAccount(userAccount);        person.setApprovalTime(LocalDate.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd")));        if(StringUtils.isEmpty(flowHistory)){            List<PersonDto>  persons = new ArrayList<>();            persons.add(person);            flowHistory = JSONObject.toJSONString(persons);        }else{            List<PersonDto> personDtos = JSONObject.parseArray(flowHistory, PersonDto.class);            personDtos.add(person);            flowHistory = JSONObject.toJSONString(personDtos);        }        remind.setFlowHistory(flowHistory);        if(roleUtil.isOffficeAdminManager()){            remind.setOfficeManager(userInfo.getUserName());        }    }    public  InvokeResult refuseNode(ObaRemindDTO dto,ObaRemind remind,ObaActInfo single){//            BpmWorkFlowDTO bpmWorkFlowDTO = getBpmWorkFlowDTO(dto,remind);//            bpmWorkFlowDTO.setNextUser(remind.getObaManager());//            bpmWorkFlowDTO.setChooseNode("N7");//            InvokeResult<BpmWorkFlowDTO> bpmWorkFlowDTOInvokeResult = workflowFeignService.doNextByFlowInstIdBpm(bpmWorkFlowDTO, null);//            if(!(bpmWorkFlowDTOInvokeResult != null && bpmWorkFlowDTOInvokeResult.isSuccess())){//                return  InvokeResult.failure("流程退回失败");//            }            remind.setNextUsers(remind.getObaManager());            remind.setStatu(ObaRemindEnum.Audit);            remind.setSecretarys("");            remind.setIsRefuse(1);            single.setStatusId(14L);            infoBiz.updateById(single);            this.updateById(remind);            return InvokeResult.success("200");    }}
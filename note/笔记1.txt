package cn.com.enersun.oa.oba.util;import cn.com.enersun.oba.dto.ObaPlanDTO;import cn.com.enersun.oba.dto.PersonDto;import org.apache.poi.hssf.usermodel.HSSFWorkbook;import org.apache.poi.ss.usermodel.*;import org.apache.poi.ss.util.CellRangeAddress;import java.io.OutputStream;import java.util.Calendar;import java.util.HashMap;import java.util.List;import java.util.Map;public class CalendarExcelExportUtil {    private static final String[] days = {            "周一", "周二",            "周三", "周四", "周五", "周六","周日"};    private static final String[]  months = {            "1月", "2月", "3月","4月", "5月", "6月","7月", "8月",            "9月","10月", "11月", "12月"};    private int year;    private int month;    private Map<Integer,List<ObaPlanDTO>> map;    private HSSFWorkbook wb;    public CalendarExcelExportUtil(int year, int month, Map<Integer, List<ObaPlanDTO>> map) {        this.year = year;        this.month = month;        this.map = map;        this.wb = wb;    }    public HSSFWorkbook createWorkbook(){        Calendar calendar = Calendar.getInstance();        //设置年份        calendar.set(Calendar.YEAR,year);        wb = new HSSFWorkbook();        Map<String, CellStyle> styles = createStyles(wb);        //设置月份        calendar.set(Calendar.MONTH,month);        calendar.set(Calendar.DAY_OF_MONTH, 1);        //设置月份        Sheet sheet = wb.createSheet(months[month]);        //turn off gridlines        sheet.setDisplayGridlines(false);        sheet.setPrintGridlines(false);        sheet.setFitToPage(true);        sheet.setHorizontallyCenter(true);        PrintSetup printSetup = sheet.getPrintSetup();        printSetup.setLandscape(true);        //the following three statements are required only for HSSF        sheet.setAutobreaks(true);        printSetup.setFitHeight((short) 1);        printSetup.setFitWidth((short) 1);        //the header row: centered text in 48pt font        Row headerRow = sheet.createRow(0);        headerRow.setHeightInPoints(30);        Cell titleCell = headerRow.createCell(0);        //设置标题        titleCell.setCellValue(year+"年"+months[month] );        titleCell.setCellStyle(styles.get("title"));        sheet.addMergedRegion(CellRangeAddress.valueOf("$A$1:$N$1"));        //header with month titles        Row monthRow = sheet.createRow(1);        for (int i = 0; i < days.length; i++) {            sheet.setColumnWidth(i * 2, 5 * 256); //the column is 5 characters wide            sheet.setColumnWidth(i * 2 + 1, 13 * 256); //the column is 13 characters wide            sheet.addMergedRegion(new CellRangeAddress(1, 1, i * 2, i * 2 + 1));            Cell monthCell = monthRow.createCell(i * 2);            monthCell.setCellValue(days[i]);            monthCell.setCellStyle(styles.get("month"));        }        int cnt = 1, day = 1;        int rownum = 2;        for (int j = 0; j < 6; j++) {            Row row = sheet.createRow(rownum++);            row.setHeightInPoints(80);            for (int i = 0; i < days.length; i++) {                Cell dayCell_1 = row.createCell(i * 2);                Cell dayCell_2 = row.createCell(i * 2 + 1);                int day_of_week = calendar.get(Calendar.DAY_OF_WEEK);                if(day_of_week==0){                    day_of_week=7;                }else{                    day_of_week-=1;                }                if (cnt >= day_of_week && calendar.get(Calendar.MONTH) == month) {                    dayCell_1.setCellValue(day);                    List<ObaPlanDTO> dtos = map.get(day);                    if(dtos!=null && dtos.size()>0){                        String value="";                        for (ObaPlanDTO dto : dtos) {                            List<PersonDto> obaLeaders = dto.getObaLeaders();                            if(obaLeaders!=null && obaLeaders.size()>0){                                for (int k = 0; k < obaLeaders.size(); k++) {                                    PersonDto personDto = obaLeaders.get(k);                                    value+=personDto.getUserName()+" ";                                    if(k==obaLeaders.size()-1){                                        value+="\r\n";                                    }                                }                            }                            value+=dto.getName()+"\r\n";                        }                      dayCell_2.setCellValue(value);                      sheet.setColumnWidth(i*2+1,15*2*256);                    }                    calendar.set(Calendar.DAY_OF_MONTH, ++day);                    if (i == days.length - 2 || i == days.length - 1) {                        dayCell_1.setCellStyle(styles.get("weekend_left"));                        dayCell_2.setCellStyle(styles.get("weekend_right"));                    } else {                        dayCell_1.setCellStyle(styles.get("workday_left"));                        dayCell_2.setCellStyle(styles.get("workday_right"));                    }                } else {                    dayCell_1.setCellStyle(styles.get("grey_left"));                    dayCell_2.setCellStyle(styles.get("grey_right"));                }                cnt++;            }            if (calendar.get(Calendar.MONTH) > month) {				break;			}        }        // Write the output to a file        return wb;    }    /**     * cell styles used for formatting calendar sheets     */    private static Map<String, CellStyle> createStyles(Workbook wb){        Map<String, CellStyle> styles = new HashMap<String, CellStyle>();        short borderColor = IndexedColors.GREY_50_PERCENT.getIndex();        CellStyle style;        Font titleFont = wb.createFont();        titleFont.setFontHeightInPoints((short)20);        titleFont.setColor(IndexedColors.DARK_BLUE.getIndex());        style = wb.createCellStyle();        style.setAlignment(HorizontalAlignment.CENTER);        style.setVerticalAlignment(VerticalAlignment.CENTER);        style.setFont(titleFont);        styles.put("title", style);        Font monthFont = wb.createFont();        monthFont.setFontHeightInPoints((short)12);        monthFont.setColor(IndexedColors.WHITE.getIndex());        monthFont.setBold(true);        style = wb.createCellStyle();        style.setAlignment(HorizontalAlignment.CENTER);        style.setVerticalAlignment(VerticalAlignment.CENTER);        style.setFillForegroundColor(IndexedColors.DARK_BLUE.getIndex());        style.setFillPattern(FillPatternType.SOLID_FOREGROUND);        style.setFont(monthFont);        styles.put("month", style);        Font dayFont = wb.createFont();        dayFont.setFontHeightInPoints((short)14);        dayFont.setBold(true);        style = wb.createCellStyle();        style.setWrapText(true);        style.setAlignment(HorizontalAlignment.LEFT);        style.setVerticalAlignment(VerticalAlignment.TOP);        style.setFillForegroundColor(IndexedColors.WHITE.getIndex());        style.setFillPattern(FillPatternType.SOLID_FOREGROUND);        style.setBorderLeft(BorderStyle.THIN);        style.setLeftBorderColor(borderColor);        style.setBorderBottom(BorderStyle.THIN);        style.setBottomBorderColor(borderColor);        style.setFont(dayFont);        styles.put("weekend_left", style);        style = wb.createCellStyle();        style.setWrapText(true);        style.setAlignment(HorizontalAlignment.LEFT);        style.setVerticalAlignment(VerticalAlignment.TOP);        style.setFillForegroundColor(IndexedColors.WHITE.getIndex());        style.setFillPattern(FillPatternType.SOLID_FOREGROUND);        style.setBorderRight(BorderStyle.THIN);        style.setRightBorderColor(borderColor);        style.setBorderBottom(BorderStyle.THIN);        style.setBottomBorderColor(borderColor);        styles.put("weekend_right", style);        style = wb.createCellStyle();        style.setWrapText(true);        style.setAlignment(HorizontalAlignment.CENTER);        style.setVerticalAlignment(VerticalAlignment.TOP);        style.setBorderLeft(BorderStyle.THIN);        style.setFillForegroundColor(IndexedColors.WHITE.getIndex());        style.setFillPattern(FillPatternType.SOLID_FOREGROUND);        style.setLeftBorderColor(borderColor);        style.setBorderBottom(BorderStyle.THIN);        style.setBottomBorderColor(borderColor);        style.setFont(dayFont);        styles.put("workday_left", style);        style = wb.createCellStyle();        style.setWrapText(true);        style.setAlignment(HorizontalAlignment.LEFT);        style.setVerticalAlignment(VerticalAlignment.TOP);        style.setFillForegroundColor(IndexedColors.WHITE.getIndex());        style.setFillPattern(FillPatternType.SOLID_FOREGROUND);        style.setBorderRight(BorderStyle.THIN);        style.setRightBorderColor(borderColor);        style.setBorderBottom(BorderStyle.THIN);        style.setBottomBorderColor(borderColor);        styles.put("workday_right", style);        style = wb.createCellStyle();        style.setBorderLeft(BorderStyle.THIN);        style.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.getIndex());        style.setFillPattern(FillPatternType.SOLID_FOREGROUND);        style.setBorderBottom(BorderStyle.THIN);        style.setBottomBorderColor(borderColor);        styles.put("grey_left", style);        style = wb.createCellStyle();        style.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.getIndex());        style.setFillPattern(FillPatternType.SOLID_FOREGROUND);        style.setBorderRight(BorderStyle.THIN);        style.setRightBorderColor(borderColor);        style.setBorderBottom(BorderStyle.THIN);        style.setBottomBorderColor(borderColor);        styles.put("grey_right", style);        return styles;    }    public void exportExcel(OutputStream os) throws Exception {        wb = createWorkbook();        wb.write(os);        os.close();    }}